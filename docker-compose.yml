version: '3.8'

services:
    postgres:
        image: postgres:latest
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
        ports:
            - "5432:5432"
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./db-seeds:/docker-entrypoint-initdb.d
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
            interval: 10s
            retries: 5
            start_period: 30s
            timeout: 10s

    redis:
        image: redis:latest
        ports:
            - "6379:6379"
        volumes:
            - redis_data:/data
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            retries: 5
            start_period: 30s
            timeout: 10s

    rabbitmq:
        image: rabbitmq:latest
        ports:
            - "5672:5672"
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        healthcheck:
            test: ["CMD", "rabbitmq-diagnostics", "status"]
            interval: 10s
            retries: 5
            start_period: 30s
            timeout: 10s

    server:
        build:
            context: .
            dockerfile: Dockerfile
        ports:
            - "3000:3000"
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            REDIS_HOST: redis
            REDIS_PORT: 6379
            RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672
            EMAIL_SENDER_USER: ${EMAIL_SENDER_USER}
            EMAIL_SENDER_PASS: ${EMAIL_SENDER_PASS}
            JWT_SECRET: ${JWT_SECRET}
            DB_HOST: postgres
            DB_PORT: 5432
            PORT: 3000
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy

volumes:
    postgres_data:
    redis_data:
    rabbitmq_data:
